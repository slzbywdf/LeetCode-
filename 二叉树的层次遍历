### 102. 二叉树的层次遍历(Middle)
给定一个二叉树，返回其按层次遍历的节点值。 （即逐层地，从左到右访问所有节点）。

例如:
```
给定二叉树: [3,9,20,null,null,15,7],

    3
   / \
  9  20
    /  \
   15   7
```
返回其层次遍历结果：
```
[
  [3],
  [9,20],
  [15,7]
]
```
**思路**:用queue
```
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    vector<vector<int>> levelOrder(TreeNode* root) {
        vector<vector<int>> answer;
        if(root==NULL){
            return answer;
        }
        queue<pair<TreeNode*, int>> my_queue;
        my_queue.push(make_pair(root, 0)); //第一层入
        vector<int> temp_ceng;
        int cengNumber = -1;
        while(!my_queue.empty()){
            pair<TreeNode*, int> temp = my_queue.front();
            my_queue.pop();
            if(temp.second!=cengNumber){ //下一层元素
                if(cengNumber!=-1){
                    answer.push_back(temp_ceng);
                }
                temp_ceng.clear();
                cengNumber = temp.second;
            }
            temp_ceng.push_back(temp.first->val); //保存当前元素
            
            if(temp.first->left!=NULL){
                my_queue.push(make_pair(temp.first->left, temp.second+1));
            }
            if(temp.first->right!=NULL){
                my_queue.push(make_pair(temp.first->right, temp.second+1));
            }
        }
        if(temp_ceng.size() > 0){
            answer.push_back(temp_ceng);
        }
        return answer;
    }
};
```
